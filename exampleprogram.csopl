; TODO run through drracket's indenter

; Type abstraction
(define reverse
  (Λ T *
     (λ x (→ T bool)
       (λ y T
         (if (x y)
             false
             true)))))
; Type application
; inttointtobool is now of type (→ (→ int bool) (→ int bool))
(define reverseinttobool
  [reverse int])

; Simple abstraction
; Type (→ int bool)
(define morethanone (λ n int (iszero (pred n))))

(define lessorequalthanone (reverseinttobool morethanone))

(lessorequalthanone (succ 0))

;; Older stuff


; Wrong plusfive
(define plusfive (λ n int (succ 0)))
(define minustwo (λ n int (pred (pred n))))
; Correct plusfive by overriding
(define plusfive (λ n int (succ (succ (succ (succ (succ n)))))))

; Type abstraction
(define idgeneric (Λ X * (λ x X x)))
; Type application
(define idint [idgeneric int])
(define idinttobool [idgeneric (→ int bool)])

(define isone (λ n int (iszero (pred n))))

((idinttobool isone) (idint (succ 0)))

; The following will fail due to no type equivalence
(define obscureinttointTOinttoint
	(λ x
		((λ T * (→ T T)) int)
		x))
(
	obscureinttointTOinttoint
	(λ x int x))

(
 ((λ x int (λ f (→ int int) (f x))) (succ 0))
 (λ x int x)
)
